#!/bin/bash

# ZetGui Desktop GUI Starter
# –ó–∞–ø—É—Å–∫ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –±–∞–∑–µ Neutralino

set -e

NO_DOCKER=false
DEBUG=false
HELP=false

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–∏–º–≤–æ–ª–∞–º–∏
log_info() { echo -e "${CYAN}‚Ñπ  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úì  $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†  $1${NC}"; }
log_error() { echo -e "${RED}‚úó  $1${NC}"; }
log_step() { echo -e "${PURPLE}*  $1${NC}"; }

# –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
show_loading() {
    local message="$1"
    local duration=${2:-3}
    local chars="‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"
    
    for ((i=0; i<duration*10; i++)); do
        printf "\r${CYAN}${chars:i%10:1}  $message${NC}"
        sleep 0.1
    done
    printf "\r${GREEN}‚úì  $message${NC}\n"
}

# –ö—Ä–∞—Å–∏–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø
show_logo() {
    clear
    echo -e "${CYAN}"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë"
    echo " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë"
    echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë       ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù"
    echo -e "${NC}"
    echo -e "${BLUE}Desktop GUI Application Starter${NC}"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo
}

while [[ $# -gt 0 ]]; do
    case $1 in
        --no-docker)
            NO_DOCKER=true
            shift
            ;;
        --debug)
            DEBUG=true
            shift
            ;;
        --help|-h)
            HELP=true
            shift
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
done

if [ "$HELP" = true ]; then
    show_logo
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}"
    echo "  ./start-all-gui.sh              # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å Docker"
    echo "  ./start-all-gui.sh --no-docker  # –ó–∞–ø—É—Å–∫ –±–µ–∑ Docker"
    echo "  ./start-all-gui.sh --debug      # Debug —Ä–µ–∂–∏–º"
    echo "  ./start-all-gui.sh --help       # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    exit 0
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR/.."
PROJECT_ROOT="$(pwd)"
ORIGINAL_DIR="$(pwd)"

source "$SCRIPT_DIR/check-dependencies.sh"

function cleanup() {
    log_step "–í—ã–ø–æ–ª–Ω—è—é cleanup..."
    
    if [ -n "$BACKEND_PID" ] && kill -0 "$BACKEND_PID" 2>/dev/null; then
        log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é backend —Å–µ—Ä–≤–µ—Ä (PID: $BACKEND_PID)..."
        kill "$BACKEND_PID" 2>/dev/null || true
        wait "$BACKEND_PID" 2>/dev/null || true
    fi
    
    if [ -n "$NEUTRALINO_PID" ] && kill -0 "$NEUTRALINO_PID" 2>/dev/null; then
        log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Neutralino app (PID: $NEUTRALINO_PID)..."
        kill "$NEUTRALINO_PID" 2>/dev/null || true
        wait "$NEUTRALINO_PID" 2>/dev/null || true
    fi
    
    pkill -f "neutralino" 2>/dev/null || true
    pkill -f "node.*server\.js" 2>/dev/null || true
    
    cd "$ORIGINAL_DIR"
    log_success "GUI —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

trap cleanup EXIT
trap cleanup SIGINT
trap cleanup SIGTERM

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥
check_command() {
    local cmd=$1
    local version_str=$2
    if ! command -v "$cmd" >/dev/null 2>&1; then
        log_warning "$cmd –Ω–µ –Ω–∞–π–¥–µ–Ω."
        return 1
    fi
    log_success "$cmd –Ω–∞–π–¥–µ–Ω."
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π GUI
function check_gui_dependencies() {
    log_step "–ü—Ä–æ–≤–µ—Ä—è—é GUI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    local missing_deps=()
    
    check_command "node" "v18" || missing_deps+=("node")
    check_command "npm" "" || missing_deps+=("npm")
    
    if [ "$NO_DOCKER" = false ]; then
        check_docker_available || missing_deps+=("docker")
    fi
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing_deps[*]}"
        log_info "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    log_success "–í—Å–µ GUI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker
function check_docker_available() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Docker"
    if ! command -v docker > /dev/null 2>&1; then
        log_warning "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        return 1
    fi
    if ! docker info > /dev/null 2>&1; then
        log_error "Docker –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker."
        return 1
    fi
    log_success "Docker –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω."
    return 0
}

function setup_docker_environment() {
    if [ "$NO_DOCKER" = true ]; then
        log_warning "Docker –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É --no-docker"
        return 0
    fi
    
    log_step "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é Docker –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è GUI..."
    
    if ! check_docker_running; then
        log_warning "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—ã—Ç–∞—é—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å..."
        "$SCRIPT_DIR/setup-docker.sh"
    fi
    
    if ! check_docker_image "zet-sandbox-image:latest"; then
        log_warning "Docker –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–±–∏—Ä–∞—é..."
        "$SCRIPT_DIR/setup-docker.sh" --rebuild
    fi
    
    if ! check_docker_container "zet-sandbox"; then
        log_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é..."
        "$SCRIPT_DIR/setup-docker.sh"
    fi
    
    log_success "Docker –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è GUI"
}

function install_node_modules() {
    local path="$1"
    local name="$2"
    
    log_step "–ü—Ä–æ–≤–µ—Ä—è—é npm –º–æ–¥—É–ª–∏ –≤ $name..."
    
    if [ ! -f "$path/package.json" ]; then
        log_warning "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $path"
        return 0
    fi
    
    cd "$path"
    
    if [ ! -d "node_modules" ] || [ ! -f "package-lock.json" ]; then
        log_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è $name..."
        npm install
        log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ $name —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ $name —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
    
    cd "$PROJECT_ROOT"
}

function build_react_app() {
    log_step "–°–æ–±–∏—Ä–∞—é React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
    
    cd "desktop/react-src"
    
    if [ ! -d "build" ] || [ ! -f "build/index.html" ]; then
        log_info "–°–æ–±–∏—Ä–∞—é React build..."
        npm run build
        log_success "React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ"
    else
        log_success "React build —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    cd "$PROJECT_ROOT"
}

function setup_neutralino() {
    log_step "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é Neutralino..."
    cd "desktop"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ npx
    if npx neu update; then
        log_success "Neutralino –æ–±–Ω–æ–≤–ª–µ–Ω"
    else
        log_error "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Neutralino"
        exit 1
    fi
    
    cd "$PROJECT_ROOT"
}

function start_backend() {
    log_step "–ó–∞–ø—É—Å–∫–∞—é backend —Å–µ—Ä–≤–µ—Ä..."
    
    cd "backend"
    
    if [ ! -f "src/server.ts" ]; then
        log_error "–ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª backend: src/server.ts"
        exit 1
    fi
    
    local port=3001
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø–æ—Ä—Ç
    if lsof -i:$port >/dev/null; then
        log_error "–ü–æ—Ä—Ç $port —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi

    log_success "Backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É $port —á–µ—Ä–µ–∑ ts-node..."
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    PORT=$port npx ts-node src/server.ts &
    BACKEND_PID=$!
    
    sleep 3
    
    if ! kill -0 "$BACKEND_PID" 2>/dev/null; then
        log_error "Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –Ω–∞ –ø–æ—Ä—Ç—É $port"
        exit 1
    fi
    
    log_success "üéâ Backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $port!"
    cd "$PROJECT_ROOT"
}

function start_gui() {
    log_step "–ó–∞–ø—É—Å–∫–∞—é Neutralino –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
    cd "desktop"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ npx
    npx neu run -- --window-enable-inspector
    
    cd "$PROJECT_ROOT"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    trap cleanup EXIT SIGINT SIGTERM
    
    echo "üñ•Ô∏è –ó–∞–ø—É—Å–∫ ZeroEnhanced GUI..."
    echo "======================================"
    
    check_gui_dependencies
    install_node_modules "." "Core"
    install_node_modules "backend" "Backend"
    install_node_modules "desktop/react-src" "Desktop React"
    build_react_app
    setup_neutralino
    start_backend
    
    echo ""
    log_success "üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã!"
    echo ""
    
    start_gui
    
    log_info "GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"
    log_info "Backend API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:3001"
    
    wait "$NEUTRALINO_PID"
}

if [ "$DEBUG" = true ]; then
    set -x
fi

main "$@" 