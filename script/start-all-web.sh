#!/bin/bash

# ZetGui Web Launcher
# –ó–∞–ø—É—Å–∫ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
log_info() { echo -e "${CYAN}‚Ñπ  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úì  $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†  $1${NC}"; }
log_error() { echo -e "${RED}‚úó  $1${NC}"; }
log_step() { echo -e "${PURPLE}*  $1${NC}"; }

# –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
show_loading() {
    local message="$1"
    local duration=${2:-3}
    local chars="‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"
    
    for ((i=0; i<duration*10; i++)); do
        printf "\r${CYAN}${chars:i%10:1}  $message${NC}"
        sleep 0.1
    done
    printf "\r${GREEN}‚úì  $message${NC}\n"
}

# –ö—Ä–∞—Å–∏–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø
show_logo() {
    clear
    echo -e "${CYAN}"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë"
    echo " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë"
    echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë       ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù"
    echo -e "${NC}"
    echo -e "${BLUE}Web Application Launcher${NC}"
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
BACKEND_PID=""
FRONTEND_PID=""

# –ü–æ—Ä—Ç—ã
BACKEND_PORT=3001
FRONTEND_PORT=3000

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function check_web_dependencies() {
    log_step "–ü—Ä–æ–≤–µ—Ä—è—é Web –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    if ! command -v node >/dev/null 2>&1; then
        log_warning "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω."
        return 1
    fi
    log_success "Node.js –Ω–∞–π–¥–µ–Ω."

    if ! command -v npm >/dev/null 2>&1; then
        log_warning "npm –Ω–µ –Ω–∞–π–¥–µ–Ω."
        return 1
    fi
    log_success "npm –Ω–∞–π–¥–µ–Ω."

    if [ "$NO_DOCKER" = false ]; then
        if ! command -v docker > /dev/null 2>&1 || ! docker info > /dev/null 2>&1; then
            log_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å AI –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞."
        else
            log_success "Docker –Ω–∞–π–¥–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω."
        fi
    fi

    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ"
    return 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend –ø–æ—Ä—Ç–∞
    if lsof -Pi :$BACKEND_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        log_warning "–ü–æ—Ä—Ç $BACKEND_PORT —É–∂–µ –∑–∞–Ω—è—Ç"
        local pid=$(lsof -ti:$BACKEND_PORT)
        log_info "–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É $BACKEND_PORT: PID $pid"
        
        read -p "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " choice
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            kill $pid 2>/dev/null || true
            sleep 2
        else
            log_error "–ù–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å backend –Ω–∞ –∑–∞–Ω—è—Ç–æ–º –ø–æ—Ä—Ç—É"
            return 1
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend –ø–æ—Ä—Ç–∞
    if lsof -Pi :$FRONTEND_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        log_warning "–ü–æ—Ä—Ç $FRONTEND_PORT —É–∂–µ –∑–∞–Ω—è—Ç"
        local pid=$(lsof -ti:$FRONTEND_PORT)
        log_info "–ü—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É $FRONTEND_PORT: PID $pid"
        
        read -p "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " choice
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            kill $pid 2>/dev/null || true
            sleep 2
        else
            log_error "–ù–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å frontend –Ω–∞ –∑–∞–Ω—è—Ç–æ–º –ø–æ—Ä—Ç—É"
            return 1
        fi
    fi
    
    log_success "–ü–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã"
    return 0
}

# –°–±–æ—Ä–∫–∞ backend
build_backend() {
    log_step "–°–±–æ—Ä–∫–∞ backend"
    
    if [ ! -f "backend/tsconfig.json" ]; then
        log_warning "Backend tsconfig.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 0
    fi
    
    cd backend
    
    show_loading "–ö–æ–º–ø–∏–ª—è—Ü–∏—è backend TypeScript" 3
    
    if npm run build 2>/dev/null || tsc 2>/dev/null; then
        log_success "Backend —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ"
        cd ..
        return 0
    else
        log_warning "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ backend, –ø–æ–ø—Ä–æ–±—É—é –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ ts-node"
        cd ..
        return 0
    fi
}

# –°–±–æ—Ä–∫–∞ frontend
build_frontend() {
    log_step "–°–±–æ—Ä–∫–∞ frontend"
    
    cd desktop/react-src
    
    if [ ! -f "package.json" ]; then
        log_error "Frontend package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        cd ../..
        return 1
    fi
    
    show_loading "–°–±–æ—Ä–∫–∞ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" 5
    
    if npm run build 2>/dev/null; then
        log_success "Frontend —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ"
        cd ../..
        return 0
    else
        log_warning "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ frontend, –∑–∞–ø—É—â—É –≤ dev —Ä–µ–∂–∏–º–µ"
        cd ../..
        return 0
    fi
}

# –ó–∞–ø—É—Å–∫ backend
function start_backend() {
    log_step "–ó–∞–ø—É—Å–∫–∞—é backend —Å–µ—Ä–≤–µ—Ä..."
    cd "backend"
    local port=3001
    if lsof -i:$port >/dev/null; then
        log_error "–ü–æ—Ä—Ç $port —É–∂–µ –∑–∞–Ω—è—Ç. –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –µ–≥–æ."
        exit 1
    fi
    log_success "Backend –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É $port..."
    PORT=$port npx ts-node src/server.ts &
    BACKEND_PID=$!
    cd ..
    sleep 3
    if ! kill -0 "$BACKEND_PID" 2>/dev/null; then
        log_error "Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è."
        exit 1
    fi
    log_success "üéâ Backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $port!"
}

# –ó–∞–ø—É—Å–∫ frontend
function start_frontend_dev_server() {
    log_step "–ó–∞–ø—É—Å–∫–∞—é frontend dev —Å–µ—Ä–≤–µ—Ä..."
    cd "desktop/react-src"
    log_info "Frontend –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É 3002..."
    npm start &
    FRONTEND_PID=$!
    cd ..
}

# –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
open_browser() {
    log_step "–û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"
    
    local url="http://localhost:$FRONTEND_PORT"
    
    if command -v xdg-open >/dev/null 2>&1; then
        xdg-open "$url" >/dev/null 2>&1
        log_success "–ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç: $url"
    elif command -v open >/dev/null 2>&1; then
        open "$url" >/dev/null 2>&1
        log_success "–ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç: $url"
    else
        log_info "–û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –≤—Ä—É—á–Ω—É—é: $url"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
show_status() {
    log_step "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö"
    echo
    
    log_info "Backend —Å–µ—Ä–≤–µ—Ä:"
    echo -e "  ${BLUE}URL:${NC} http://localhost:$BACKEND_PORT"
    echo -e "  ${BLUE}PID:${NC} $BACKEND_PID"
    echo -e "  ${BLUE}–õ–æ–≥:${NC} backend.log"
    
    echo
    log_info "Frontend —Å–µ—Ä–≤–µ—Ä:"
    echo -e "  ${BLUE}URL:${NC} http://localhost:$FRONTEND_PORT"
    echo -e "  ${BLUE}PID:${NC} $FRONTEND_PID"
    echo -e "  ${BLUE}–õ–æ–≥:${NC} frontend.log"
    
    echo
    log_info "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo -e "  ${BLUE}–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ:${NC} Ctrl+C"
    echo -e "  ${BLUE}–õ–æ–≥–∏ backend:${NC} tail -f backend.log"
    echo -e "  ${BLUE}–õ–æ–≥–∏ frontend:${NC} tail -f frontend.log"
}

# Cleanup —Ñ—É–Ω–∫—Ü–∏—è
cleanup() {
    echo
    log_step "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–æ–≤"
    
    if [ ! -z "$BACKEND_PID" ]; then
        log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é backend (PID: $BACKEND_PID)"
        kill $BACKEND_PID 2>/dev/null || true
        wait $BACKEND_PID 2>/dev/null || true
    fi
    
    if [ ! -z "$FRONTEND_PID" ]; then
        log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é frontend (PID: $FRONTEND_PID)"
        kill $FRONTEND_PID 2>/dev/null || true
        wait $FRONTEND_PID 2>/dev/null || true
    fi
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤
    local backend_pids=$(lsof -ti:$BACKEND_PORT 2>/dev/null || true)
    local frontend_pids=$(lsof -ti:$FRONTEND_PORT 2>/dev/null || true)
    
    if [ ! -z "$backend_pids" ]; then
        log_info "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É $BACKEND_PORT"
        kill $backend_pids 2>/dev/null || true
    fi
    
    if [ ! -z "$frontend_pids" ]; then
        log_info "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É $FRONTEND_PORT"
        kill $frontend_pids 2>/dev/null || true
    fi
    
    log_success "–í–µ–±-—Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    exit 0
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    trap cleanup EXIT SIGINT SIGTERM
    
    show_logo
    log_info "–ó–∞–ø—É—Å–∫ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ ZetGui"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if ! check_web_dependencies; then
        exit 1
    fi

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_node_modules "." "Core"
    install_node_modules "backend" "Backend"
    install_node_modules "desktop/react-src" "Frontend"
    
    start_backend
    start_frontend_dev_server
    
    log_info "–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ backend –∑–∞–ø—É—â–µ–Ω—ã."
    log_info "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
    
    wait
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
check_directory() {
    if [ ! -f "package.json" ] || [ ! -d "backend" ] || [ ! -d "desktop/react-src" ]; then
        log_error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
        log_info "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ backend/ –∏ desktop/react-src/"
        exit 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ trap –¥–ª—è cleanup
trap cleanup SIGINT SIGTERM

# –ó–∞–ø—É—Å–∫
check_directory
main "$@" 