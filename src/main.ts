import axios from 'axios';
import chalk from 'chalk';
import cors from 'cors';
import express from 'express';
import fs from 'fs';
import os from 'os';
import path from 'path';
import readline from 'readline';
import { AIService, DockerService } from './core';

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Prod.json ---
const loadConfig = (): { prod: boolean; domain?: string } => {
    try {
        const configPath = path.join(__dirname, '..', 'Prod.json');
        const configData = fs.readFileSync(configPath, 'utf-8');
        return JSON.parse(configData);
    } catch (error) {
        console.warn('Failed to load Prod.json, defaulting to development mode:', error);
        return { prod: false };
    }
};

// --- Deployment toggle based on Prod.json ---
const config = loadConfig();
const USE_REMOTE = config.prod;

const API_HOST = USE_REMOTE ? (config.domain || 'https://zetapi.loophole.site/') : 'http://localhost:4000';
const AUTH_API_URL = `${API_HOST}/api/auth`;
const CONFIG_DIR = path.join(os.homedir(), '.config', 'zet');
const TOKEN_PATH = path.join(CONFIG_DIR, 'token');

type UserInfo = { email: string; request_count: number };

const askQuestion = (query: string): Promise<string> => new Promise(resolve => rl.question(query, resolve));

let remainingRequests: number | null = null;

const fetchRemaining = async (token: string): Promise<void> => {
    try {
        // –æ—Ç–≤–µ—Ç: { email: string, request_count: number }
        const resp = await axios.get<UserInfo>(`${API_HOST}/api/user/me`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        remainingRequests = resp.data.request_count;
    } catch {
        remainingRequests = null;
    }
};

const saveToken = (token: string): void => {
    if (!fs.existsSync(CONFIG_DIR)) {
        fs.mkdirSync(CONFIG_DIR, { recursive: true });
    }
    fs.writeFileSync(TOKEN_PATH, token, 'utf-8');
};

const readToken = (): string | null => {
    if (fs.existsSync(TOKEN_PATH)) {
        return fs.readFileSync(TOKEN_PATH, 'utf-8');
    }
    return null;
};

const deleteToken = (): void => {
    if (fs.existsSync(TOKEN_PATH)) {
        fs.unlinkSync(TOKEN_PATH);
    }
};

// --- Authentication Flow (CLI) ---
const ensureAuthenticated = async (): Promise<string> => {
    const existingToken = readToken();
    if (existingToken) return existingToken;

    console.log(chalk.yellow('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.'));

    while (true) {
        const email = await askQuestion(chalk.cyan('Email: '));
        const password = await askQuestion(chalk.cyan('–ü–∞—Ä–æ–ª—å: '));

        try {
            // –æ—Ç–≤–µ—Ç: { token: string }
            const loginResp = await axios.post(`${AUTH_API_URL}/login`, { email, password });
            const token: string = loginResp.data.token;
            saveToken(token);
            await fetchRemaining(token);
            console.log(chalk.green(`–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ó–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${remainingRequests ?? 'N/A'}`));
            return token;
        } catch (err: any) {
            if (axios.isAxiosError(err) && err.response?.status === 404) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                const answer = await askQuestion(chalk.yellow('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç? (y/n) '));
                if (answer.toLowerCase() !== 'y') {
                    continue;
                }
                try {
                    // –æ—Ç–≤–µ—Ç: { token: string }
                    const regResp = await axios.post(`${AUTH_API_URL}/register`, { email, password });
                    const token: string = regResp.data.token;
                    saveToken(token);
                    await fetchRemaining(token);
                    console.log(chalk.green(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ó–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${remainingRequests ?? 'N/A'}`));
                    return token;
                } catch (regErr: any) {
                    console.error(chalk.red(regErr.response?.data?.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.'));
                    continue;
                }
            } else if (axios.isAxiosError(err) && err.response?.status === 401) {
                console.error(chalk.red('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.'));
                continue;
            } else {
                console.error(chalk.red('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:'), err.message);
                continue;
            }
        }
    }
};

// –°–ø–∏–Ω–Ω–µ—Ä –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
class Spinner {
    private frames = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è'];
    private interval: NodeJS.Timeout | null = null;
    private frameIndex = 0;
    private message = '';

    start(message: string): void {
        this.message = message;
        this.interval = setInterval(() => {
            process.stdout.write(`\r${chalk.cyan(this.frames[this.frameIndex])} ${chalk.yellow(this.message)}`);
            this.frameIndex = (this.frameIndex + 1) % this.frames.length;
        }, 100);
    }

    stop(): void {
        if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
            process.stdout.write('\r' + ' '.repeat(50) + '\r');
        }
    }
}

async function main() {
    // –¥–ª—è GUI –Ω–∞ –ø—Ä–æ–¥–µ
    if (process.argv.includes('--beta-gui')) {
        const { spawn } = require('child_process');
        const path = require('path');
        const desktopDir = path.join(__dirname, '..', '..', 'desktop');

        console.log(chalk.cyan('üöÄ –ó–∞–ø—É—Å–∫ GUI-–¥—Ä–∞–π–≤–µ—Ä–∞...'));

        const dockerService = new DockerService();
        try {
            await dockerService.ensureSandbox();
            console.log(chalk.green('‚úÖ Docker Sandbox –≥–æ—Ç–æ–≤.'));
        } catch (error) {
            console.error(chalk.red('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Docker:'), error);
            process.exit(1);
        }

        const app = express();
        const GUI_DRIVER_PORT = 4001;
        app.use(cors());
        app.use(express.json());

        app.post('/api/execute', async (req: express.Request, res: express.Response) => {
            const { command } = req.body;
            if (!command) {
                return res.status(400).json({ error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞' });
            }
            try {
                console.log(chalk.yellow(`‚ö° GUI | –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${command}`));
                const result = await dockerService.executeCommand(command);
                res.json(result);
            } catch (error) {
                const message = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Docker';
                console.error(chalk.red('üê≥ GUI | –û—à–∏–±–∫–∞ Docker:'), message);
                res.status(500).json({ error: message });
            }
        });

        app.post('/api/update-file', async (req: express.Request, res: express.Response) => {
            const p = req.body;
            try {
                if (!p.file) throw new Error('–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');

                let newContent: string;
                if (p.code_lines) newContent = p.code_lines.join('\\n');
                else if (p.code) newContent = p.code;
                else throw new Error('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ (code –∏–ª–∏ code_lines)');

                const base64Content = Buffer.from(newContent).toString('base64');
                const command = `mkdir -p $(dirname '${p.file}') && echo '${base64Content}' | base64 -d > '${p.file}'`;

                console.log(chalk.yellow(`‚ö° GUI | –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: ${p.file}`));
                const result = await dockerService.executeCommand(command);
                if (result.stderr) throw new Error(result.stderr);

                res.json({ success: true, ...result });
            } catch (error) {
                const message = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞';
                console.error(chalk.red('üìù GUI | –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:'), message);
                res.status(500).json({ error: message });
            }
        });

        app.post('/api/files', async (req: express.Request, res: express.Response) => {
            const { path = '.' } = req.body;
            try {
                console.log(chalk.yellow(`‚ö° GUI | –õ–∏—Å—Ç–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –≤: ${path}`));
                // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–∏
                const safePath = path.replace(/'/g, "'\\''");
                const result = await dockerService.executeCommand(`ls -F '${safePath}'`);
                if (result.stderr) throw new Error(result.stderr);
                res.json({ files: result.stdout.split('\\n').filter(Boolean) });
            } catch (error) {
                const message = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤';
                console.error(chalk.red('üìÇ GUI | –û—à–∏–±–∫–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤:'), message);
                res.status(500).json({ error: message });
            }
        });

        app.post('/api/file/read', async (req: express.Request, res: express.Response) => {
            const { file } = req.body;
            if (!file) {
                return res.status(400).json({ error: '–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' });
            }
            try {
                console.log(chalk.yellow(`‚ö° GUI | –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${file}`));
                const safeFile = file.replace(/'/g, "'\\''");
                const result = await dockerService.executeCommand(`cat '${safeFile}'`);
                // stderr –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ—à–∏–±–∫–∞–º–∏, –Ω–æ cat –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∏—á–µ–≥–æ —Ç—É–¥–∞ –ø–∏—Å–∞—Ç—å
                if (result.stderr) throw new Error(result.stderr);
                res.json({ content: result.stdout });
            } catch (error) {
                const message = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞';
                console.error(chalk.red('üìñ GUI | –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:'), message);
                res.status(500).json({ error: message });
            }
        });

        app.listen(GUI_DRIVER_PORT, () => {
            console.log(chalk.green(`‚úÖ GUI-–¥—Ä–∞–π–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${GUI_DRIVER_PORT}`));
        });

        const child = spawn('npm', ['run', 'start'], {
            cwd: desktopDir,
            stdio: 'inherit'
        });
        child.on('exit', (code: number) => process.exit(code ?? 0));
        return;
    }

    console.log(chalk.cyan('üöÄ Zet Enhanced –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...'));

    let authToken = await ensureAuthenticated();

    const aiService = new AIService();
    const dockerService = new DockerService();
    const spinner = new Spinner();

    while (true) {
        try {
            await dockerService.ensureSandbox();
            await aiService.init(authToken);
            await fetchRemaining(authToken);
            console.log(chalk.green('‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!'));
            console.log(chalk.gray('–í–≤–µ–¥–∏—Ç–µ "exit" –∏–ª–∏ "quit" –¥–ª—è –≤—ã—Ö–æ–¥–∞.'));
            break;
        } catch (error: any) {
            if (error.status === 401 || error.status === 403 || error.status === 404) {
                console.error(chalk.yellow(`üîÑ –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (—Å—Ç–∞—Ç—É—Å ${error.status}). –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.`));
                deleteToken();
                authToken = await ensureAuthenticated();
                continue;
            }
            const message = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.';
            console.error(chalk.red('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:'), message);
            process.exit(1);
        }
    }

    let lastObservation = '';
    let currentPageId: number | null = null;

    process.on('SIGINT', async () => {
        try {
            if (currentPageId !== null) {
                await axios.post(`${API_HOST}/api/exit`, { pageId: currentPageId }).catch(() => { });
                console.log(chalk.yellow(`\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPageId} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞.`));
            }
        } finally {
            rl.close();
            process.exit(0);
        }
    });

    while (true) {
        const countStr = chalk.magenta(`[${remainingRequests ?? '-'}]`);
        const promptStr = `\n${countStr} > `;
        const userInput = await askQuestion(promptStr);

        const lowered = userInput.toLowerCase().trim();

        if (lowered === '/deluser' || lowered === '/logout') {
            console.log(chalk.yellow('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏...'));
            deleteToken();
            console.log(chalk.cyan('üîÑ –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.'));
            authToken = await ensureAuthenticated();
            lastObservation = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —É–¥–∞–ª–∏–ª —Å–µ—Å—Å–∏—é –∏ –ø—Ä–æ—à–µ–ª –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.';
            continue;
        }

        if (lowered === 'exit' || lowered === 'quit') {
            break;
        }

        try {
            spinner.start('Zet –¥—É–º–∞–µ—Ç...');

            let streamBuffer = '';
            let isThinking = true;
            let lastThoughtLength = 0;

            const { ai: aiResponse, pageId: newPageId } = await aiService.getCommand(
                userInput,
                lastObservation,
                authToken,
                currentPageId === null ? undefined : currentPageId,
                (chunk: string) => {
                    spinner.stop();
                    streamBuffer += chunk;

                    try {
                        const thoughtMatch = streamBuffer.match(/"thought":\s*"([^"]*(?:\\.[^"]*)*)/);
                        if (thoughtMatch) {
                            const thoughtText = thoughtMatch[1]
                                .replace(/\\n/g, '\n')
                                .replace(/\\"/g, '"')
                                .replace(/\\\\/g, '\\');

                            if (thoughtText.length > lastThoughtLength) {
                                if (isThinking) {
                                    process.stdout.write(chalk.gray('üí≠ '));
                                    isThinking = false;
                                }

                                const newText = thoughtText.slice(lastThoughtLength);
                                process.stdout.write(chalk.gray(newText));
                                lastThoughtLength = thoughtText.length;
                            }
                        }
                    } catch (e) {

                    }
                }
            );

            spinner.stop();

            if (lastThoughtLength === 0) {
                console.log(chalk.gray(`üí≠ ${aiResponse.thought}`));
            } else {
                console.log('');
            }

            if (aiResponse.displayText) {
                console.log(chalk.cyan(`\nüìù ${aiResponse.displayText}`));
            }

            const { tool, parameters } = aiResponse.action;

            if (tool === 'protocol_complete') {
                if (currentPageId !== null) {
                    await axios.post(`${API_HOST}/api/exit`, { pageId: currentPageId }).catch(() => { });
                    console.log(chalk.yellow(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPageId} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞.`));
                }
                console.log(chalk.green('‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ.'));
                currentPageId = null;
                lastObservation = '–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ.';
                continue;
            }

            if (tool === 'execute_command' && parameters && 'command' in parameters) {
                const cmdParams = parameters as { command: string; confirm: boolean; prompt?: string };

                if (cmdParams.confirm) {
                    const confirmPrompt = cmdParams.prompt || `–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É "${cmdParams.command}"? (y/n)`;
                    const confirmation = await askQuestion(chalk.red(`‚ö†Ô∏è ${confirmPrompt} `));
                    if (confirmation.toLowerCase() !== 'y') {
                        console.log(chalk.yellow('‚ùå –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'));
                        lastObservation = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã.';
                        continue;
                    }
                }

                console.log(chalk.yellow(`‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${cmdParams.command}`));

                try {
                    const { stdout, stderr } = await dockerService.executeCommand(cmdParams.command);

                    if (stdout) {
                        console.log(chalk.green('üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç:'));
                        console.log(stdout);
                        lastObservation = `–ö–æ–º–∞–Ω–¥–∞ "${cmdParams.command}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –≤–µ—Ä–Ω—É–ª–∞:\n${stdout}`;
                    }

                    if (stderr) {
                        console.error(chalk.red('üî• –û—à–∏–±–∫–∞:'));
                        console.error(stderr);
                        lastObservation = `–ö–æ–º–∞–Ω–¥–∞ "${cmdParams.command}" –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:\n${stderr}`;
                    }

                    if (!stdout && !stderr) {
                        console.log(chalk.gray('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ –≤—ã–≤–æ–¥–∞.'));
                        lastObservation = `–ö–æ–º–∞–Ω–¥–∞ "${cmdParams.command}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ –≤—ã–≤–æ–¥–∞.`;
                    }
                } catch (dockerError) {
                    console.error(chalk.red('üê≥ –û—à–∏–±–∫–∞ Docker:'), dockerError);
                    lastObservation = `–ö–æ–º–∞–Ω–¥–∞ "${cmdParams.command}" –Ω–µ —Å–º–æ–≥–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è: ${dockerError instanceof Error ? dockerError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Docker'}`;
                }
            }

            else if (tool === 'update_file' && parameters) {
                const p: any = parameters;
                const targetFile = p.file;
                const shouldConfirm = p.confirm === true;
                const promptText = p.prompt || `–û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª "${targetFile}"? (y/n)`;

                let shouldProceed = true;
                if (shouldConfirm) {
                    const answer = await askQuestion(chalk.yellow(`üìù ${promptText} `));
                    shouldProceed = answer.toLowerCase() === 'y';
                }

                if (!shouldProceed) {
                    console.log(chalk.yellow('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'));
                    lastObservation = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞.';
                } else {
                    try {
                        let newContent: string;

                        if (p.file.includes('..')) {
                            throw new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: –ø—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å ".."');
                        }

                        if (p.line_operations) {
                            console.log(chalk.red('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ Docker. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—É—é –∑–∞–º–µ–Ω—É —Ñ–∞–π–ª–∞.'));
                            lastObservation = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å.';
                            continue;
                        }
                        else if (p.code_lines) {
                            newContent = p.code_lines.join('\n');
                            console.log(chalk.cyan(`üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø–∏—Å–∏ ${p.code_lines.length} —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª ${targetFile}`));
                        }
                        else if (p.code) {
                            newContent = p.code;
                            console.log(chalk.cyan(`üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª ${targetFile}`));
                        }
                        else {
                            throw new Error('–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–¥–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è code, code_lines –∏–ª–∏ line_operations)');
                        }

                        const base64Content = Buffer.from(newContent).toString('base64');
                        const command = `mkdir -p $(dirname '${targetFile}') && echo '${base64Content}' | base64 -d > '${targetFile}'`;

                        console.log(chalk.yellow(`‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Docker...`));
                        const { stdout, stderr } = await dockerService.executeCommand(command);

                        if (stderr) {
                            throw new Error(stderr);
                        }

                        console.log(chalk.green(`‚úÖ –§–∞–π–ª ${targetFile} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.`));
                        lastObservation = `–§–∞–π–ª ${targetFile} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.`;
                        if (stdout) {
                            console.log(chalk.gray(stdout));
                        }

                    } catch (err) {
                        console.error(chalk.red(`üí• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${(err as Error).message}`));
                        lastObservation = `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${(err as Error).message}`;
                    }
                }
            }

            await fetchRemaining(authToken);

            if (typeof newPageId === 'number') {
                currentPageId = newPageId;
            }
        } catch (error: any) {
            spinner.stop();
            console.error(chalk.red('\nüö® –û—à–∏–±–∫–∞:'));

            if (error.message && error.message.includes('JSON')) {
                console.error(chalk.red('üìù –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:'));
                console.error(chalk.yellow('‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞'));
                console.error(chalk.yellow('‚Ä¢ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ'));
                lastObservation = '–û—Ç–≤–µ—Ç –ò–ò —Å–æ–¥–µ—Ä–∂–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –∏ –Ω–µ –º–æ–≥ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.';
            } else if (error.status === 429) {
                console.error(chalk.red('üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.'));
                lastObservation = '–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤.';
            } else if (error.status === 401 || error.status === 403 || error.status === 404) {
                console.error(chalk.red('üîë –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.'));
                deleteToken();
                authToken = await ensureAuthenticated();
                lastObservation = `–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å—Ç–∞—Ç—É—Å ${error.status}). –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞.`;
                if (error.status === 400 || error.status === 404) {
                    currentPageId = null;
                }
            } else if (error.message && error.message.includes('fetch')) {
                console.error(chalk.red('üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API —Å—Ç—Ä–∏–º–∏–Ω–≥–∞'));
                lastObservation = '–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. API —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
            } else {
                const message = error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.';
                console.error(chalk.red('üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:'), message);
                lastObservation = `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: ${message}. –ü–æ–ø—Ä–æ–±—É—é —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.`;
            }

            if (error.status === 503 || (error.message && error.message.includes('503'))) {
                console.log(chalk.yellow('üîÑ –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...'));
                await new Promise(resolve => setTimeout(resolve, 5000));
            }
        }
    }
    rl.close();
    console.log(chalk.cyan('üëã –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Zet Enhanced!'));
}

main(); 
